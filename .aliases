# shell
alias la='ls -la'
alias ka='k -ah'
alias suroot='sudo -E -s'
alias devicons='cat $HOME/.local/share/fonts/i_dev.sh'
alias lg='l | grep'
function mkcd() {
    mkdir $1
	cd $1
}
function tarthis() {
    tar -czf $1.tar.gz $1/
}
function toggle-display() {
    current_display=$(xrandr --listmonitors)

    DP_ACTIVE=false
    HDMI_ACTIVE=false

    if [[ $current_display =~ "DP-2" ]]; then
        DP_ACTIVE=true
    fi
    if [[ $current_display =~ "HDMI-0" ]]; then
        HDMI_ACTIVE=true
    fi

    if [[ $DP_ACTIVE == true && $HDMI_ACTIVE == true ]]; then
        echo "Both monitors active, switching to just display port"
        enable_monitor="DP-2"
        disable_monitor="HDMI-0"
    elif [[ $DP_ACTIVE == true && $HDMI_ACTIVE == false ]]; then
        echo "Switching to just HDMI output"
        enable_monitor="HDMI-0"
        disable_monitor="DP-2"
    elif [[ $DP_ACTIVE == false && $HDMI_ACTIVE == true ]]; then
        echo "Switching to just Display Port output"
        enable_monitor="DP-2"
        disable_monitor="HDMI-0"
    fi

    xrandr --output $enable_monitor --auto
    xrandr --output $disable_monitor --off
}
function winboot() {
    WINDOWS_TITLE=`grep -i 'windows' /boot/grub/grub.cfg|cut -d"'" -f2`
    echo 'Booting directly into windows'
    sudo grub-reboot "$WINDOWS_TITLE"
    sudo reboot
}
function mine() {
    cd $HOME
    DIR="$(dirname "$(readlink -f .zshrc)")"
    . $DIR/public_key
    $HOME/eth/ethminer --farm-recheck 200 -G -S eu1.ethermine.org:4444 -FS us1.ethermine.org:4444 -O $PUBLIC_KEY
}
function auto() {
    current_dir="$PWD"
    if [[ -n $VIRTUAL_ENV ]]; then
        current_env="$VIRTUAL_ENV"
        deactivate
    else
        current_env=""
    fi

    cd $HOME/git/auto-remote
    source bin/activate
    python auto_remote.py send --message=$1
    deactivate

    if [[ -n $current_env ]]; then
        cd $current_env
        source bin/activate
    fi
    cd $current_dir
}
functon delete-except() {
	find . -type f -not -name $1 -print0 | xargs -0 -- rm
}

# tmux
alias tnew='tmux new -s '
alias tmat='tmux a -t '
alias tkill='tmux kill-session -t '
alias tmls='tmux ls'

# python
alias pl='pip list --format columns'
alias sba='source bin/activate'
function dex() {
    deactivate
    echo 'Deactivated virtual environment'
    exit
}

# git
alias gs='git status'
alias gd='git diff'
alias gpum='git pull upstream master'
alias gpom='git push origin master'
alias gtc='git commit -m "temp" --no-verify'
function gfpr() {
    git fetch upstream refs/pull-requests/$1/from:$2
    git checkout $2
}
function grl() {
    sha=$(command git rev-parse HEAD^1)
    git reset $sha
}

# docker
alias dp='docker ps -a --format="table {{.ID}}\t{{.Names}}\t{{.Image}}\t{{.Status}}"'
alias dim='docker images | sort -h'
alias drmi='docker rmi'
alias dc='docker-compose'
function dsrm() {
	docker stop $1
	docker rm $1
}

# ffmpeg
function convert-to-mp4() {
	echo "Converting ${1} to mp4"
	ffmpeg -i $1 -c:v libx264 -crf 19 -preset slow -b:a 192k -ac 2 $2
}


if [[ -f $HOME/.aliases ]]; then
    source $HOME/.aliases
fi

# has to be done after local aliases set so it can use $NOTES_DIR value set in local aliases file
function notes(){
	original_dir=$PWD
	cd $NOTES_DIR
	vim
	cd $original_dir
}

