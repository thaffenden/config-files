# ********** DOCKER ALIASES **********
alias dc='docker-compose'
alias dim='docker images | sort -h'
alias dp='docker ps -a --format="table {{.ID}}\t{{.Names}}\t{{.Image}}\t{{.Status}}"'
alias dsrmall="docker ps -aq --no-trunc -f status=exited | xargs docker rm"

# docker prune images
function dprune() {
  docker images -q --filter dangling=true | xargs docker rmi
  docker image ls --format "{{.Repository}}:{{.Tag}}" | grep "amazonaws" | xargs docker rmi
}

# docker remove image with fzf
function drmi() {
  local cid
  cid=$(docker images | sed 1d | fzf -q "$1" | awk '{print $3}')
  [ -n "$cid" ] && docker rmi "$cid"
}

# docker stop docker remove
function dsrm() {
	docker stop $1
	docker rm $1
}

# ********** FILE SYSTEM ALIASES **********
alias l='ls -lah'

# delete all files in the directory except the one specified
function delete-except() {
	find . -type f -not -name $1 -print0 | xargs -0 -- rm
}

# wrapper to make opening a file consistent
function open() {
  if [[ `uname` == "Darwin" ]]; then
    open $@
  else
    file=$1
    case "${file##*.}" in
      "html")
        firefox-dev $@
        ;;
      "jpg" | "jpeg" | "JPG" | "png")
        eog $@
        ;;
      "mp4" | "mkv")
        vlc $@
        ;;
      *)
        nautilus $@
    esac

  fi
}

# remove any files in a directory that are marked as copies
function remove-copy() {
  if [[ "$1" == "" ]]; then
    search="."
  else
    search=$1
  fi
  IFS=$'\n' && for i in $(ls $search); do echo "$i"; mv $i ${i/\ copy\./\.}; done 
}

# show all unique files in the specified directory
function unique-files() {
  if [[ "$1" == "" ]]; then
    search="."
  else
    search=$1
  fi
  find $search -type f -name "*.*" | awk -F. '{print $NF}' | sort -u
}

# ********** FFMPEG ALIASES **********
# convert an audio file to flac
function convert-to-flac() {
  file=$1
  full_path=$(realpath $file)
  dir_name=$(dirname $full_path)
  docker run -v $dir_name:/files --rm jrottenberg/ffmpeg -i /files/$file -af aformat=s16:44100 -c:a flac "/files/${file%.*}.flac"
}

# convert an audio file to mp3
function convert-to-mp3() {
  file=$1
  full_path=$(realpath $file)
  dir_name=$(dirname $full_path)
  docker run -v $dir_name:/files --rm jrottenberg/ffmpeg -i /files/$file -ab 321k -map_metadata 0 -id3v2_version 3 "/files/${file%.*}.mp3"
}

# convert a video file to mp4
function convert-to-mp4() {
  file=$1
  full_path=$(realpath $file)
  dir_name=$(dirname $full_path)
  docker run -v $dir_name:/files --rm jrottenberg/ffmpeg -i /files/$file -c:v libx264 -crf 19 -preset slow -b:a 192k -ac 2 "/files/${file%.*}.mp4"
}

# highlight a section of the screen then record it
function screen() {
  slop=$(slop -f "%x %y %w %h %g %i") || exit 1
  read -r X Y W H G ID < <(echo $slop)
  epoch=$(date "+%s")
  ffmpeg -f x11grab -s "$W"x"$H" -i :1.0+$X,$Y -c:v h264_nvenc -an -y "$HOME/Videos/screen-recording-${epoch}.mp4"
}

# ********** GIT ALIASES **********
alias gb='git branch'
alias gcb='git checkout -b'
alias gcm='git checkout $(gdb)'
alias gd='git diff'
alias ggpull='git pull origin $(git rev-parse --abbrev-ref HEAD)'
alias ggpush='git push origin $(git rev-parse --abbrev-ref HEAD)'
alias glo='git log --oneline'
alias gs='git status'
alias gtc='git commit -m "temp" --no-verify'

# git checkout branch with fuzzy search
function gbb() {
  local branch
  branch=$(git branch --no-color --no-column | fzf -q "$1" | awk '{print $1}')
  [ -n "$branch" ] && git checkout "$branch"

}

# get the default branch name
function gdb() {
  git remote show origin | rg "HEAD" | cut -d' ' -f5
}

# git fetch pull request
function gfpr() {
    git fetch upstream refs/pull-requests/$1/from:$2
    git checkout $2
}

# git reset last commit
function grl() {
    sha=$(command git rev-parse HEAD^1)
    git reset $sha
}

# ********** GITHUB ALIASES **********
# list PRs and check out selected one with fzf
function ghpr() {
  local pr
  pr=$(gh pr list | fzf -q "$1" | awk '{print $1}')
  [ -n "$pr" ] && gh pr checkout "$pr"
}

# ********** GOLANG ALIASES **********
# run unit tests and create then open html report for easier reviewing
function go-cover() {
    tempFile="/tmp/go-cover.$$.tmp"
    go test -coverprofile=$tempFile ./... && go tool cover -html=$tempFile && unlink $tempFile
}

# ********** HOMEBREW ALIASES **********
# brew install plugin
function bip() {
  local inst=$(brew search | fzf -m)

  if [[ $inst ]]; then
    for prog in $(echo $inst); do
      brew install $prog; 
    done;
  fi
}
# brew update plugin
function bup() {
  local upd=$(brew leaves | fzf -m)

  if [[ $upd ]]; then
    for prog in $(echo $upd); do
      brew upgrade $prog; 
    done;
  fi
}
# brew delete plugin
function bdp() {
  local uninst=$(brew leaves | fzf -m)

  if [[ $uninst ]]; then
    for prog in $(echo $uninst); do 
      brew uninstall $prog; 
    done;
  fi
}

# ********** PYTHON ALIASES **********
alias pl='pip list --format columns'
alias sba='source bin/activate'

# deactivate virtual environment
function dex() {
    deactivate
    echo 'Deactivated virtual environment'
    exit
}

# ********** SHELL ALIASES **********
alias fzp="fzf --preview='bat {} --color=always'"
alias lg='l | grep'
alias music=$HOME/.config/ncmpcpp/tmux_session.sh
alias reset_pure='prompt_pure_async_init=0; async_stop_worker prompt_pure'
alias task='docker run --rm -it -v /etc/localtime:/etc/localtime:ro -v $HOME/.task/.taskrc:/root/.taskrc -v $HOME/.task/:/root/.task jamesnetherton/taskwarrior'

# trigger auto remote commands
function auto() {
    current_dir="$PWD"
    if [[ -n $VIRTUAL_ENV ]]; then
        current_env="$VIRTUAL_ENV"
        deactivate
    else
        current_env=""
    fi

    cd $HOME/git/auto-remote
    source bin/activate
    python auto_remote.py send --message=$1
    deactivate

    if [[ -n $current_env ]]; then
        cd $current_env
        source bin/activate
    fi
    cd $current_dir
}

# set specified file or directory as owned by current user
function mine!() {
  sudo chown -R $USER $@
}

# make a directory, then cd into it
function mkcd() {
  mkdir $1
	cd $1
}

# start nvim docker container with current directory volume mounted
nvim() {
  local workdir
  workdir="/home/t14n/${PWD##*/}"
  docker run --rm -it -v ${PWD}:$workdir --workdir=$workdir t14n/nvim
}

# wrapper to make copy command consistent
function pbcopy() {
  if [[ `uname` == "Darwin" ]]; then
    pbcopy
  else
    xclip -selection clipboard
  fi
}

# convert the specified image into a square png
function sqimg() {
  filename=$1
  docker run --rm -v $HOME/Pictures:/imgs dpokidov/imagemagick /imgs/$filename -resize "400x400^" -gravity center -crop 400x400+0+0  "/imgs/${filename%.*}-output.png"
  echo "${filename%.*}-output.png created"
}

# tar and gzip the specified directory
function tarthis() {
    tar -czf $1.tar.gz $1/
}

# toggle display from monitor to TV
function toggle-display() {
    DP_OUT="DP-4"
    HDMI_OUT="HDMI-0"
    current_display=$(xrandr --listmonitors)

    DP_ACTIVE=false
    HDMI_ACTIVE=false

    if [[ $current_display =~ "${DP_OUT}" ]]; then
        DP_ACTIVE=true
    fi
    if [[ $current_display =~ "${HDMI_OUT}" ]]; then
        HDMI_ACTIVE=true
    fi

    if [[ $DP_ACTIVE == true && $HDMI_ACTIVE == true ]]; then
        echo "Both monitors active, switching to just display port"
        enable_monitor=$DP_OUT
        disable_monitor=$HDMI_OUT
    elif [[ $DP_ACTIVE == true && $HDMI_ACTIVE == false ]]; then
        echo "Switching to just HDMI output"
        enable_monitor=$HDMI_OUT
        disable_monitor=$DP_OUT
    elif [[ $DP_ACTIVE == false && $HDMI_ACTIVE == true ]]; then
        echo "Switching to just Display Port output"
        enable_monitor=$DP_OUT
        disable_monitor=$HDMI_OUT
    fi

    xrandr --output $enable_monitor --auto
    xrandr --output $disable_monitor --off
}

# restart and boot into Windows
function winboot() {
    WINDOWS_TITLE=`grep -i 'windows' /boot/grub/grub.cfg|cut -d"'" -f2`
    echo 'Booting directly into windows'
    sudo grub-reboot "$WINDOWS_TITLE"
    sudo reboot
}

# ********** TMUX ALIASES **********
alias tkill='tmux kill-session -t '
alias tmat='tmux a -t '
alias tmls='tmux ls'
alias tnew='tmux new -s '


# source device specific aliases that I don't want included in this file
if [[ -f $HOME/.aliases ]]; then
    source $HOME/.aliases
fi

# has to be done after local aliases set so it can use $NOTES_DIR value set in local aliases file
function notes(){
	original_dir=$PWD
	cd $NOTES_DIR
	vim
	cd $original_dir
}
# vim:ft=sh
